package auth

import "github.com/cohix/simplcrypto"

// DefaultGroupUUID and others are consts for the internal (memory) auth manager
const (
	DefaultGroupUUID = "defaultgroupuuid"
	AdminGroupUUID   = "admingroupuuid"
)

// Manager describes the interface for things that are able to auth
type Manager interface {
	AttemptAuth(attempt *Attempt) (*EncMemberSession, error)
	CheckAuth(session *Session) error
	CheckAuthEnsureAdmin(session *Session) error
	DeleteMemberAuth(uuid string) error
	AddGroup(group *MemberGroup) error
	MasterPubKey() *simplcrypto.SerializablePubKey
	ReEncryptTaskKey(memberUUID string, encTaskKey *simplcrypto.Message) (*simplcrypto.Message, error)
}

// Attempt is an attempt at authing
type Attempt struct {
	MemberUUID  string
	GroupUUID   string
	PubKey      *simplcrypto.KeyPair
	AuthHashSig *simplcrypto.Signature // this is sign([]byte(AuthHash) + LittleEndian.PutUint64(time.Now().Unix()))
	Timestamp   int64
}

// Session describes a member's attempt at proving they have a session
type Session struct {
	MemberUUID          string
	GroupUUID           string
	SessionChallengeSig *simplcrypto.Signature
}

// EncMemberSession is sent back to the runner as an auth challenge
type EncMemberSession struct {
	EncSessionChallenge *simplcrypto.Message
}

type memberAuth struct {
	UUID             string
	GroupUUID        string
	SessionChallenge []byte
	PubKey           *simplcrypto.KeyPair
}

// MemberGroup represents a group of memebers to be authed
type MemberGroup struct {
	UUID     string
	Name     string
	JoinCode string
	AuthHash []byte // this is sha256([]byte(JoinCode) + []byte(GroupPassphrase)), generated by client
}

// SetGroupJoinHashAttempt represents an attempt to set the group join hash
type SetGroupJoinHashAttempt struct {
	Group   *MemberGroup
	CodeSig *simplcrypto.Signature
}
