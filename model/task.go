// this file contains extensions to the Task struct generated by protoc, do not edit the associated .pb.go file.

package model

// TaskStatusWaiting and others represent the status of a task
const (
	// task is waiting when it has been received but not yet scheduled to a runner
	// waiting tasks will be queued at the first available opportunity
	TaskStatusWaiting = "waiting"

	// task goes waiting -> queued when it has been scheduled to a runner
	TaskStatusQueued = "queued"

	// task goes queued -> running when the runner has begun executing it
	TaskStatusRunning = "running"

	// task goes running -> complete if the runner completes the task with no critical errors.
	// complete does not indicate wether the result of the job contained an error or not, but rather that the runner was able to finish running the task
	TaskStatusCompleted = "complete"

	// task goes running -> failed if the runner cannot complete the job for whatever reason (crash, lost runner connection, etc.)
	TaskStatusFailed = "failed"

	// task goes queued -> retrying if the runner a task was scheduled to fails to run the task
	// task foes running -> retrying if the task (runs past the deadline OR fails) AND is marked as retryable
	// retrying is similar to waiting, except there will be a backoff before it is re-queued
	TaskStatusRetrying = "retrying"
)

// IsNotStarted is if a task hasn't even tried to run yet (hasn't been assigned a runner)
func (t *Task) IsNotStarted() bool {
	return t.Status == TaskStatusWaiting || t.Status == TaskStatusRetrying
}

// IsRunning is if the task is in the process of being run (has been assigned a runner)
func (t *Task) IsRunning() bool {
	return t.Status == TaskStatusQueued || t.Status == TaskStatusRunning
}

// IsFinished is if the task has run and has a result of some sort
func (t *Task) IsFinished() bool {
	return t.Status == TaskStatusCompleted || t.Status == TaskStatusFailed
}

// CanTransitionToState returns true if a task can go from its current state to new
func (t *Task) CanTransitionToState(new string) bool {
	if t.Status == "" {
		return new == TaskStatusWaiting
	}

	if t.Status == TaskStatusWaiting {
		return new == TaskStatusQueued || new == TaskStatusRetrying
	}

	if t.Status == TaskStatusQueued {
		return new == TaskStatusRunning || new == TaskStatusFailed
	}

	if t.Status == TaskStatusRunning {
		return new == TaskStatusCompleted || new == TaskStatusFailed
	}

	if t.Status == TaskStatusFailed {
		return new == TaskStatusRetrying
	}

	if t.Status == TaskStatusRetrying {
		return new == TaskStatusQueued
	}

	if t.Status == TaskStatusCompleted {
		return false // just want to be real clear that this should never happen
	}

	return false
}
