// Code generated by protoc-gen-go. DO NOT EDIT.
// source: runner.proto

package model

import (
	fmt "fmt"
	simplcrypto "github.com/cohix/simplcrypto"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AuthRunnerRequest struct {
	PubKey               *simplcrypto.SerializablePubKey `protobuf:"bytes,1,opt,name=PubKey,proto3" json:"PubKey,omitempty"`
	JoinCodeSignature    *simplcrypto.Signature          `protobuf:"bytes,2,opt,name=JoinCodeSignature,proto3" json:"JoinCodeSignature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *AuthRunnerRequest) Reset()         { *m = AuthRunnerRequest{} }
func (m *AuthRunnerRequest) String() string { return proto.CompactTextString(m) }
func (*AuthRunnerRequest) ProtoMessage()    {}
func (*AuthRunnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48eceea7e2abc593, []int{0}
}

func (m *AuthRunnerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthRunnerRequest.Unmarshal(m, b)
}
func (m *AuthRunnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthRunnerRequest.Marshal(b, m, deterministic)
}
func (m *AuthRunnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthRunnerRequest.Merge(m, src)
}
func (m *AuthRunnerRequest) XXX_Size() int {
	return xxx_messageInfo_AuthRunnerRequest.Size(m)
}
func (m *AuthRunnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthRunnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthRunnerRequest proto.InternalMessageInfo

func (m *AuthRunnerRequest) GetPubKey() *simplcrypto.SerializablePubKey {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *AuthRunnerRequest) GetJoinCodeSignature() *simplcrypto.Signature {
	if m != nil {
		return m.JoinCodeSignature
	}
	return nil
}

type AuthRunnerResponse struct {
	EncChallenge         *simplcrypto.Message `protobuf:"bytes,1,opt,name=EncChallenge,proto3" json:"EncChallenge,omitempty"`
	EncChallengeKey      *simplcrypto.Message `protobuf:"bytes,2,opt,name=EncChallengeKey,proto3" json:"EncChallengeKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AuthRunnerResponse) Reset()         { *m = AuthRunnerResponse{} }
func (m *AuthRunnerResponse) String() string { return proto.CompactTextString(m) }
func (*AuthRunnerResponse) ProtoMessage()    {}
func (*AuthRunnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48eceea7e2abc593, []int{1}
}

func (m *AuthRunnerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthRunnerResponse.Unmarshal(m, b)
}
func (m *AuthRunnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthRunnerResponse.Marshal(b, m, deterministic)
}
func (m *AuthRunnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthRunnerResponse.Merge(m, src)
}
func (m *AuthRunnerResponse) XXX_Size() int {
	return xxx_messageInfo_AuthRunnerResponse.Size(m)
}
func (m *AuthRunnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthRunnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuthRunnerResponse proto.InternalMessageInfo

func (m *AuthRunnerResponse) GetEncChallenge() *simplcrypto.Message {
	if m != nil {
		return m.EncChallenge
	}
	return nil
}

func (m *AuthRunnerResponse) GetEncChallengeKey() *simplcrypto.Message {
	if m != nil {
		return m.EncChallengeKey
	}
	return nil
}

type RegisterRunnerRequest struct {
	UUID                 string                 `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Kind                 string                 `protobuf:"bytes,2,opt,name=Kind,proto3" json:"Kind,omitempty"`
	Tags                 []string               `protobuf:"bytes,3,rep,name=Tags,proto3" json:"Tags,omitempty"`
	ChallengeSignature   *simplcrypto.Signature `protobuf:"bytes,4,opt,name=ChallengeSignature,proto3" json:"ChallengeSignature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RegisterRunnerRequest) Reset()         { *m = RegisterRunnerRequest{} }
func (m *RegisterRunnerRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterRunnerRequest) ProtoMessage()    {}
func (*RegisterRunnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48eceea7e2abc593, []int{2}
}

func (m *RegisterRunnerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterRunnerRequest.Unmarshal(m, b)
}
func (m *RegisterRunnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterRunnerRequest.Marshal(b, m, deterministic)
}
func (m *RegisterRunnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRunnerRequest.Merge(m, src)
}
func (m *RegisterRunnerRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterRunnerRequest.Size(m)
}
func (m *RegisterRunnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRunnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRunnerRequest proto.InternalMessageInfo

func (m *RegisterRunnerRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RegisterRunnerRequest) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *RegisterRunnerRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *RegisterRunnerRequest) GetChallengeSignature() *simplcrypto.Signature {
	if m != nil {
		return m.ChallengeSignature
	}
	return nil
}

func init() {
	proto.RegisterType((*AuthRunnerRequest)(nil), "taask.server.model.AuthRunnerRequest")
	proto.RegisterType((*AuthRunnerResponse)(nil), "taask.server.model.AuthRunnerResponse")
	proto.RegisterType((*RegisterRunnerRequest)(nil), "taask.server.model.RegisterRunnerRequest")
}

func init() { proto.RegisterFile("runner.proto", fileDescriptor_48eceea7e2abc593) }

var fileDescriptor_48eceea7e2abc593 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x25, 0x6d, 0x29, 0x74, 0x2d, 0x48, 0x17, 0x8a, 0xc5, 0x53, 0xa9, 0x08, 0x5e, 0xdc, 0x88,
	0x5e, 0xf4, 0x24, 0x5a, 0x8b, 0x68, 0x11, 0x64, 0x6b, 0x2f, 0xde, 0x36, 0xe9, 0x90, 0x2c, 0x4d,
	0x76, 0xe3, 0x7e, 0x88, 0xf5, 0x57, 0x78, 0xf0, 0xe8, 0x8f, 0x95, 0xec, 0x56, 0x6d, 0xaa, 0x14,
	0x2f, 0x61, 0x32, 0x79, 0xef, 0xcd, 0xcb, 0x9b, 0x41, 0x6d, 0x65, 0x85, 0x00, 0x45, 0x0a, 0x25,
	0x8d, 0xc4, 0xd8, 0x30, 0xa6, 0xe7, 0x44, 0x83, 0x7a, 0x06, 0x45, 0x72, 0x39, 0x83, 0x6c, 0xf7,
	0x28, 0xe1, 0x26, 0xb5, 0x11, 0x89, 0x65, 0x1e, 0xc6, 0x32, 0xe5, 0x2f, 0xa1, 0xe6, 0x79, 0x91,
	0xc5, 0x6a, 0x51, 0x18, 0x19, 0x3a, 0x5e, 0x98, 0x83, 0xd6, 0x2c, 0x01, 0xaf, 0xf2, 0x2f, 0xc6,
	0x1c, 0x16, 0x05, 0xe3, 0xcb, 0xb9, 0x83, 0xf7, 0x00, 0x75, 0x2e, 0xac, 0x49, 0xa9, 0x33, 0x43,
	0xe1, 0xc9, 0x82, 0x36, 0xf8, 0x14, 0x35, 0xef, 0x6d, 0x34, 0x86, 0x45, 0x2f, 0xe8, 0x07, 0x07,
	0x5b, 0xc7, 0x7d, 0xe2, 0x74, 0x88, 0x17, 0x22, 0x13, 0x50, 0x9c, 0x65, 0xfc, 0x95, 0x45, 0x19,
	0x78, 0x1c, 0x5d, 0xe2, 0xf1, 0x08, 0x75, 0x6e, 0x25, 0x17, 0x43, 0x39, 0x83, 0x09, 0x4f, 0x04,
	0x33, 0x56, 0x41, 0xaf, 0xe6, 0x44, 0x76, 0xd6, 0x44, 0xbe, 0x3e, 0xd3, 0xdf, 0x8c, 0xc1, 0x5b,
	0x80, 0xf0, 0xaa, 0x2d, 0x5d, 0x48, 0xa1, 0x01, 0x9f, 0xa1, 0xf6, 0x48, 0xc4, 0xc3, 0x94, 0x65,
	0x19, 0x88, 0x04, 0x96, 0xee, 0xba, 0x55, 0xe1, 0x3b, 0x1f, 0x09, 0xad, 0x40, 0xf1, 0x39, 0xda,
	0x5e, 0x7d, 0x2f, 0xff, 0xad, 0xb6, 0x89, 0xbd, 0x8e, 0x1e, 0x7c, 0x04, 0xa8, 0x4b, 0x21, 0xe1,
	0xda, 0x80, 0xaa, 0xa6, 0x85, 0x51, 0x63, 0x3a, 0xbd, 0xb9, 0x72, 0x6e, 0x5a, 0xd4, 0xd5, 0x65,
	0x6f, 0xcc, 0xc5, 0xcc, 0xcd, 0x68, 0x51, 0x57, 0x97, 0xbd, 0x07, 0x96, 0xe8, 0x5e, 0xbd, 0x5f,
	0x2f, 0x7b, 0x65, 0x8d, 0xaf, 0x11, 0xfe, 0x9e, 0xf2, 0x13, 0x58, 0x63, 0x73, 0x60, 0x7f, 0x50,
	0x2e, 0xf7, 0x1f, 0xf7, 0x56, 0x96, 0xef, 0xae, 0xc9, 0x3f, 0x0f, 0xfd, 0x4d, 0x85, 0xee, 0xa6,
	0xa2, 0xa6, 0x5b, 0xfb, 0xc9, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x64, 0x57, 0xf5, 0xc7, 0x7e,
	0x02, 0x00, 0x00,
}
