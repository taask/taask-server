// Code generated by protoc-gen-go. DO NOT EDIT.
// source: runnerservice.proto

package service

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	auth "github.com/taask/taask-server/auth"
	model "github.com/taask/taask-server/model"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_055c2bb08edcaeb3, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type RegisterRunnerRequest struct {
	Kind                 string        `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	Tags                 []string      `protobuf:"bytes,2,rep,name=Tags,proto3" json:"Tags,omitempty"`
	Session              *auth.Session `protobuf:"bytes,3,opt,name=Session,proto3" json:"Session,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RegisterRunnerRequest) Reset()         { *m = RegisterRunnerRequest{} }
func (m *RegisterRunnerRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterRunnerRequest) ProtoMessage()    {}
func (*RegisterRunnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_055c2bb08edcaeb3, []int{1}
}

func (m *RegisterRunnerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterRunnerRequest.Unmarshal(m, b)
}
func (m *RegisterRunnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterRunnerRequest.Marshal(b, m, deterministic)
}
func (m *RegisterRunnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRunnerRequest.Merge(m, src)
}
func (m *RegisterRunnerRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterRunnerRequest.Size(m)
}
func (m *RegisterRunnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRunnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRunnerRequest proto.InternalMessageInfo

func (m *RegisterRunnerRequest) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *RegisterRunnerRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *RegisterRunnerRequest) GetSession() *auth.Session {
	if m != nil {
		return m.Session
	}
	return nil
}

type UpdateTaskRequest struct {
	Update               *model.TaskUpdate `protobuf:"bytes,1,opt,name=Update,proto3" json:"Update,omitempty"`
	Session              *auth.Session     `protobuf:"bytes,2,opt,name=Session,proto3" json:"Session,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateTaskRequest) Reset()         { *m = UpdateTaskRequest{} }
func (m *UpdateTaskRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateTaskRequest) ProtoMessage()    {}
func (*UpdateTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_055c2bb08edcaeb3, []int{2}
}

func (m *UpdateTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateTaskRequest.Unmarshal(m, b)
}
func (m *UpdateTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateTaskRequest.Marshal(b, m, deterministic)
}
func (m *UpdateTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTaskRequest.Merge(m, src)
}
func (m *UpdateTaskRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateTaskRequest.Size(m)
}
func (m *UpdateTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTaskRequest proto.InternalMessageInfo

func (m *UpdateTaskRequest) GetUpdate() *model.TaskUpdate {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *UpdateTaskRequest) GetSession() *auth.Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "taask.server.service.Empty")
	proto.RegisterType((*RegisterRunnerRequest)(nil), "taask.server.service.RegisterRunnerRequest")
	proto.RegisterType((*UpdateTaskRequest)(nil), "taask.server.service.UpdateTaskRequest")
}

func init() { proto.RegisterFile("runnerservice.proto", fileDescriptor_055c2bb08edcaeb3) }

var fileDescriptor_055c2bb08edcaeb3 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0xe9, 0xa6, 0x1b, 0xbe, 0xa1, 0x60, 0x74, 0x52, 0x2a, 0xc8, 0x28, 0xc8, 0x06, 0x62,
	0x2a, 0x53, 0xbc, 0x4f, 0xf0, 0xa4, 0xa7, 0x6c, 0x1e, 0xf4, 0xd6, 0x6d, 0x8f, 0xad, 0xcc, 0x36,
	0x35, 0x79, 0x11, 0x3c, 0x7a, 0xf7, 0x8f, 0x96, 0x24, 0x1d, 0x3a, 0xec, 0xc0, 0x4b, 0x79, 0x7c,
	0xf9, 0xf5, 0x7d, 0xef, 0x7d, 0x09, 0x1c, 0x29, 0x53, 0x14, 0xa8, 0x34, 0xaa, 0xf7, 0x6c, 0x86,
	0xbc, 0x54, 0x92, 0x24, 0x3b, 0xa6, 0x34, 0xd5, 0x2b, 0x6e, 0x45, 0x54, 0xbc, 0x3a, 0x8b, 0x4e,
	0x72, 0x39, 0xc7, 0xd7, 0xc4, 0x21, 0x09, 0x59, 0xc0, 0x95, 0x51, 0x37, 0x35, 0xb4, 0xac, 0x64,
	0x5b, 0x7a, 0x39, 0x6e, 0xc3, 0xee, 0x7d, 0x5e, 0xd2, 0x47, 0x6c, 0xa0, 0x2b, 0x70, 0x91, 0x69,
	0x42, 0x25, 0x9c, 0x99, 0xc0, 0x37, 0x83, 0x9a, 0x18, 0x83, 0x9d, 0x87, 0xac, 0x98, 0x87, 0x41,
	0x2f, 0x18, 0xec, 0x09, 0x57, 0x5b, 0x6d, 0x92, 0x2e, 0x74, 0xd8, 0xe8, 0x35, 0xad, 0x66, 0x6b,
	0x76, 0x03, 0xed, 0x31, 0x6a, 0x9d, 0xc9, 0x22, 0x6c, 0xf6, 0x82, 0x41, 0x67, 0x18, 0xf1, 0x8d,
	0x01, 0x9d, 0x69, 0x45, 0x88, 0x35, 0x1a, 0x7f, 0x06, 0x70, 0xf8, 0x54, 0xce, 0x53, 0xc2, 0x49,
	0xaa, 0x57, 0x6b, 0xcf, 0x5b, 0x68, 0x79, 0xd1, 0xb9, 0x76, 0x86, 0x67, 0x9b, 0xad, 0xdc, 0x8a,
	0xdc, 0xfe, 0xe0, 0x29, 0x51, 0xd1, 0xbf, 0x67, 0x68, 0xfc, 0x7b, 0x86, 0xe1, 0x57, 0x03, 0xf6,
	0xfd, 0xce, 0x63, 0x1f, 0x22, 0x7b, 0x04, 0x18, 0x19, 0x5a, 0x7a, 0x91, 0xd5, 0x35, 0x19, 0x11,
	0x61, 0x5e, 0x52, 0x14, 0x6f, 0x3f, 0x13, 0xa8, 0x4b, 0x59, 0x68, 0x64, 0xcf, 0x70, 0xb0, 0x19,
	0x2d, 0xbb, 0xe0, 0x75, 0x77, 0xc7, 0x6b, 0x2f, 0x20, 0x0a, 0xb7, 0x2d, 0x7f, 0x15, 0x30, 0x01,
	0xf0, 0x93, 0x1e, 0xeb, 0xd7, 0xb7, 0xfd, 0x93, 0x6f, 0x74, 0x5a, 0x0f, 0xba, 0x97, 0x70, 0xd7,
	0x7f, 0x39, 0x5f, 0x64, 0xb4, 0x34, 0x53, 0x3e, 0x93, 0x79, 0xe2, 0x40, 0xff, 0xbd, 0xf4, 0x78,
	0x52, 0xe1, 0xd3, 0x96, 0x7b, 0x42, 0xd7, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x36, 0x19,
	0x58, 0x9e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RunnerServiceClient is the client API for RunnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RunnerServiceClient interface {
	AuthRunner(ctx context.Context, in *auth.Attempt, opts ...grpc.CallOption) (*auth.AttemptResponse, error)
	RegisterRunner(ctx context.Context, in *RegisterRunnerRequest, opts ...grpc.CallOption) (RunnerService_RegisterRunnerClient, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*Empty, error)
}

type runnerServiceClient struct {
	cc *grpc.ClientConn
}

func NewRunnerServiceClient(cc *grpc.ClientConn) RunnerServiceClient {
	return &runnerServiceClient{cc}
}

func (c *runnerServiceClient) AuthRunner(ctx context.Context, in *auth.Attempt, opts ...grpc.CallOption) (*auth.AttemptResponse, error) {
	out := new(auth.AttemptResponse)
	err := c.cc.Invoke(ctx, "/taask.server.service.RunnerService/AuthRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerServiceClient) RegisterRunner(ctx context.Context, in *RegisterRunnerRequest, opts ...grpc.CallOption) (RunnerService_RegisterRunnerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RunnerService_serviceDesc.Streams[0], "/taask.server.service.RunnerService/RegisterRunner", opts...)
	if err != nil {
		return nil, err
	}
	x := &runnerServiceRegisterRunnerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RunnerService_RegisterRunnerClient interface {
	Recv() (*model.Task, error)
	grpc.ClientStream
}

type runnerServiceRegisterRunnerClient struct {
	grpc.ClientStream
}

func (x *runnerServiceRegisterRunnerClient) Recv() (*model.Task, error) {
	m := new(model.Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *runnerServiceClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/taask.server.service.RunnerService/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunnerServiceServer is the server API for RunnerService service.
type RunnerServiceServer interface {
	AuthRunner(context.Context, *auth.Attempt) (*auth.AttemptResponse, error)
	RegisterRunner(*RegisterRunnerRequest, RunnerService_RegisterRunnerServer) error
	UpdateTask(context.Context, *UpdateTaskRequest) (*Empty, error)
}

func RegisterRunnerServiceServer(s *grpc.Server, srv RunnerServiceServer) {
	s.RegisterService(&_RunnerService_serviceDesc, srv)
}

func _RunnerService_AuthRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(auth.Attempt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).AuthRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taask.server.service.RunnerService/AuthRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).AuthRunner(ctx, req.(*auth.Attempt))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerService_RegisterRunner_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterRunnerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RunnerServiceServer).RegisterRunner(m, &runnerServiceRegisterRunnerServer{stream})
}

type RunnerService_RegisterRunnerServer interface {
	Send(*model.Task) error
	grpc.ServerStream
}

type runnerServiceRegisterRunnerServer struct {
	grpc.ServerStream
}

func (x *runnerServiceRegisterRunnerServer) Send(m *model.Task) error {
	return x.ServerStream.SendMsg(m)
}

func _RunnerService_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taask.server.service.RunnerService/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RunnerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "taask.server.service.RunnerService",
	HandlerType: (*RunnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthRunner",
			Handler:    _RunnerService_AuthRunner_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _RunnerService_UpdateTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterRunner",
			Handler:       _RunnerService_RegisterRunner_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "runnerservice.proto",
}
