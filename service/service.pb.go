// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package service

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	model "github.com/taask/taask-server/model"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0xc9, 0x41, 0xc1, 0x2c, 0xeb, 0x21, 0x88, 0x2c, 0x3d, 0xbb, 0x8a, 0x82, 0xc9, 0xb2,
	0xbe, 0x81, 0x5e, 0xbc, 0x6e, 0xd6, 0x53, 0x6f, 0x69, 0x1d, 0xda, 0x52, 0xdb, 0xd4, 0x4c, 0xe2,
	0x8b, 0xf9, 0x18, 0xbe, 0x94, 0x24, 0x69, 0xa5, 0x85, 0x08, 0x7b, 0x29, 0x65, 0xfe, 0x6f, 0xfe,
	0x7f, 0x26, 0x43, 0xd7, 0x08, 0xe6, 0xab, 0x29, 0x81, 0x0f, 0x46, 0x5b, 0xcd, 0xae, 0xac, 0x52,
	0xd8, 0x72, 0x5f, 0x04, 0xc3, 0x47, 0x2d, 0xbb, 0xee, 0xf4, 0x3b, 0x7c, 0x88, 0x80, 0x08, 0xeb,
	0x81, 0xf0, 0x9b, 0x6d, 0xe6, 0x75, 0xe3, 0xfa, 0x1e, 0x4c, 0x54, 0xf6, 0xdf, 0x84, 0xae, 0xde,
	0x14, 0xb6, 0xc7, 0xe8, 0xc0, 0x5e, 0xe9, 0xd9, 0xc1, 0x81, 0x03, 0xb6, 0xe1, 0x8b, 0x84, 0x60,
	0xc0, 0x3d, 0x99, 0x6d, 0x53, 0x4a, 0x68, 0xf2, 0xb2, 0x04, 0x1c, 0x74, 0x8f, 0xc0, 0x72, 0x7a,
	0xf1, 0x52, 0x43, 0xd9, 0xfa, 0x22, 0xbb, 0x49, 0xf5, 0xfc, 0xc9, 0x12, 0x3e, 0x1d, 0xa0, 0x4d,
	0x3b, 0xcf, 0xa8, 0xe8, 0xbc, 0x23, 0xfb, 0x1f, 0x42, 0xd7, 0x32, 0xac, 0x31, 0xcd, 0x5d, 0xd1,
	0x4b, 0x09, 0x55, 0x83, 0x16, 0x4c, 0x14, 0xd8, 0x7d, 0xca, 0x6c, 0xc9, 0x4c, 0xb9, 0x0f, 0xa7,
	0xa0, 0xe3, 0x5a, 0x07, 0xba, 0x3a, 0x5a, 0x03, 0xaa, 0xf3, 0x23, 0x21, 0xbb, 0x4d, 0xb5, 0xce,
	0x80, 0x29, 0xe2, 0xdf, 0xe7, 0xdc, 0x91, 0xe7, 0xbb, 0x7c, 0x5b, 0x35, 0xb6, 0x76, 0x05, 0x2f,
	0x75, 0x27, 0x02, 0x17, 0xbf, 0x8f, 0x91, 0x16, 0xe3, 0x79, 0x8b, 0xf3, 0x70, 0xb3, 0xa7, 0xdf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x1f, 0x1d, 0xbd, 0x0c, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskServiceClient interface {
	Queue(ctx context.Context, in *model.Task, opts ...grpc.CallOption) (*model.QueueTaskResponse, error)
	CheckTask(ctx context.Context, in *model.CheckTaskRequest, opts ...grpc.CallOption) (TaskService_CheckTaskClient, error)
}

type taskServiceClient struct {
	cc *grpc.ClientConn
}

func NewTaskServiceClient(cc *grpc.ClientConn) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) Queue(ctx context.Context, in *model.Task, opts ...grpc.CallOption) (*model.QueueTaskResponse, error) {
	out := new(model.QueueTaskResponse)
	err := c.cc.Invoke(ctx, "/taask.server.service.TaskService/Queue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) CheckTask(ctx context.Context, in *model.CheckTaskRequest, opts ...grpc.CallOption) (TaskService_CheckTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TaskService_serviceDesc.Streams[0], "/taask.server.service.TaskService/CheckTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskServiceCheckTaskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TaskService_CheckTaskClient interface {
	Recv() (*model.CheckTaskResponse, error)
	grpc.ClientStream
}

type taskServiceCheckTaskClient struct {
	grpc.ClientStream
}

func (x *taskServiceCheckTaskClient) Recv() (*model.CheckTaskResponse, error) {
	m := new(model.CheckTaskResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TaskServiceServer is the server API for TaskService service.
type TaskServiceServer interface {
	Queue(context.Context, *model.Task) (*model.QueueTaskResponse, error)
	CheckTask(*model.CheckTaskRequest, TaskService_CheckTaskServer) error
}

func RegisterTaskServiceServer(s *grpc.Server, srv TaskServiceServer) {
	s.RegisterService(&_TaskService_serviceDesc, srv)
}

func _TaskService_Queue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Queue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taask.server.service.TaskService/Queue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Queue(ctx, req.(*model.Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_CheckTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.CheckTaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskServiceServer).CheckTask(m, &taskServiceCheckTaskServer{stream})
}

type TaskService_CheckTaskServer interface {
	Send(*model.CheckTaskResponse) error
	grpc.ServerStream
}

type taskServiceCheckTaskServer struct {
	grpc.ServerStream
}

func (x *taskServiceCheckTaskServer) Send(m *model.CheckTaskResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _TaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "taask.server.service.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Queue",
			Handler:    _TaskService_Queue_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CheckTask",
			Handler:       _TaskService_CheckTask_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}

// RunnerServiceClient is the client API for RunnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RunnerServiceClient interface {
	RegisterRunner(ctx context.Context, in *model.RegisterRunnerRequest, opts ...grpc.CallOption) (*model.RegisterRunnerResponse, error)
	StreamTasks(ctx context.Context, in *model.StreamTasksRequest, opts ...grpc.CallOption) (RunnerService_StreamTasksClient, error)
}

type runnerServiceClient struct {
	cc *grpc.ClientConn
}

func NewRunnerServiceClient(cc *grpc.ClientConn) RunnerServiceClient {
	return &runnerServiceClient{cc}
}

func (c *runnerServiceClient) RegisterRunner(ctx context.Context, in *model.RegisterRunnerRequest, opts ...grpc.CallOption) (*model.RegisterRunnerResponse, error) {
	out := new(model.RegisterRunnerResponse)
	err := c.cc.Invoke(ctx, "/taask.server.service.RunnerService/RegisterRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerServiceClient) StreamTasks(ctx context.Context, in *model.StreamTasksRequest, opts ...grpc.CallOption) (RunnerService_StreamTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RunnerService_serviceDesc.Streams[0], "/taask.server.service.RunnerService/StreamTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &runnerServiceStreamTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RunnerService_StreamTasksClient interface {
	Recv() (*model.Task, error)
	grpc.ClientStream
}

type runnerServiceStreamTasksClient struct {
	grpc.ClientStream
}

func (x *runnerServiceStreamTasksClient) Recv() (*model.Task, error) {
	m := new(model.Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RunnerServiceServer is the server API for RunnerService service.
type RunnerServiceServer interface {
	RegisterRunner(context.Context, *model.RegisterRunnerRequest) (*model.RegisterRunnerResponse, error)
	StreamTasks(*model.StreamTasksRequest, RunnerService_StreamTasksServer) error
}

func RegisterRunnerServiceServer(s *grpc.Server, srv RunnerServiceServer) {
	s.RegisterService(&_RunnerService_serviceDesc, srv)
}

func _RunnerService_RegisterRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.RegisterRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).RegisterRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taask.server.service.RunnerService/RegisterRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).RegisterRunner(ctx, req.(*model.RegisterRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerService_StreamTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.StreamTasksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RunnerServiceServer).StreamTasks(m, &runnerServiceStreamTasksServer{stream})
}

type RunnerService_StreamTasksServer interface {
	Send(*model.Task) error
	grpc.ServerStream
}

type runnerServiceStreamTasksServer struct {
	grpc.ServerStream
}

func (x *runnerServiceStreamTasksServer) Send(m *model.Task) error {
	return x.ServerStream.SendMsg(m)
}

var _RunnerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "taask.server.service.RunnerService",
	HandlerType: (*RunnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterRunner",
			Handler:    _RunnerService_RegisterRunner_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTasks",
			Handler:       _RunnerService_StreamTasks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
