// Code generated by protoc-gen-go. DO NOT EDIT.
// source: partner.proto

package service

import (
	fmt "fmt"
	simplcrypto "github.com/cohix/simplcrypto"
	proto "github.com/golang/protobuf/proto"
	auth "github.com/taask/taask-server/auth"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UpdateRequest struct {
	PartnerUUID          string                 `protobuf:"bytes,1,opt,name=PartnerUUID,proto3" json:"PartnerUUID,omitempty"`
	EncUpdate            *simplcrypto.Message   `protobuf:"bytes,2,opt,name=EncUpdate,proto3" json:"EncUpdate,omitempty"`
	UpdateSignature      *simplcrypto.Signature `protobuf:"bytes,3,opt,name=UpdateSignature,proto3" json:"UpdateSignature,omitempty"`
	EncDataKey           *simplcrypto.Message   `protobuf:"bytes,4,opt,name=EncDataKey,proto3" json:"EncDataKey,omitempty"`
	Session              *auth.Session          `protobuf:"bytes,5,opt,name=Session,proto3" json:"Session,omitempty"`
	IsHealthCheck        bool                   `protobuf:"varint,6,opt,name=IsHealthCheck,proto3" json:"IsHealthCheck,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UpdateRequest) Reset()         { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()    {}
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f6ef58aa3ea61bf, []int{0}
}

func (m *UpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRequest.Unmarshal(m, b)
}
func (m *UpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRequest.Marshal(b, m, deterministic)
}
func (m *UpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRequest.Merge(m, src)
}
func (m *UpdateRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRequest.Size(m)
}
func (m *UpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRequest proto.InternalMessageInfo

func (m *UpdateRequest) GetPartnerUUID() string {
	if m != nil {
		return m.PartnerUUID
	}
	return ""
}

func (m *UpdateRequest) GetEncUpdate() *simplcrypto.Message {
	if m != nil {
		return m.EncUpdate
	}
	return nil
}

func (m *UpdateRequest) GetUpdateSignature() *simplcrypto.Signature {
	if m != nil {
		return m.UpdateSignature
	}
	return nil
}

func (m *UpdateRequest) GetEncDataKey() *simplcrypto.Message {
	if m != nil {
		return m.EncDataKey
	}
	return nil
}

func (m *UpdateRequest) GetSession() *auth.Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *UpdateRequest) GetIsHealthCheck() bool {
	if m != nil {
		return m.IsHealthCheck
	}
	return false
}

func init() {
	proto.RegisterType((*UpdateRequest)(nil), "taask.server.service.UpdateRequest")
}

func init() { proto.RegisterFile("partner.proto", fileDescriptor_0f6ef58aa3ea61bf) }

var fileDescriptor_0f6ef58aa3ea61bf = []byte{
	// 365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xdf, 0x4a, 0xeb, 0x40,
	0x10, 0x87, 0x49, 0xcf, 0xb1, 0xda, 0xad, 0x51, 0x58, 0x2c, 0x86, 0x5c, 0x05, 0xff, 0xd0, 0xdc,
	0xb8, 0x29, 0xad, 0x3e, 0x40, 0xb5, 0x05, 0x8b, 0x14, 0x24, 0xa1, 0x37, 0x82, 0xe0, 0x76, 0x1d,
	0x9a, 0xd0, 0x26, 0x1b, 0x77, 0x37, 0x62, 0xdf, 0xcd, 0x97, 0xf0, 0x8d, 0xa4, 0xbb, 0x51, 0x1b,
	0x29, 0xea, 0x4d, 0x32, 0x4c, 0xbe, 0x8f, 0x09, 0xbf, 0x19, 0x64, 0xe7, 0x54, 0xa8, 0x0c, 0x04,
	0xc9, 0x05, 0x57, 0x1c, 0x1f, 0x28, 0x4a, 0xe5, 0x9c, 0x48, 0x10, 0xcf, 0x20, 0xf4, 0x2b, 0x61,
	0xe0, 0xee, 0x32, 0x9e, 0xa6, 0x3c, 0x33, 0x8c, 0xdb, 0xa2, 0x85, 0x8a, 0x03, 0x5d, 0x07, 0xab,
	0xb2, 0x6c, 0x77, 0x66, 0x89, 0x8a, 0x8b, 0x29, 0x61, 0x3c, 0x0d, 0x18, 0x8f, 0x93, 0x97, 0x40,
	0x26, 0x69, 0xbe, 0x60, 0x62, 0x99, 0x2b, 0x5e, 0xe2, 0x29, 0x48, 0x49, 0x67, 0x60, 0x8c, 0xa3,
	0xd7, 0x1a, 0xb2, 0x27, 0xf9, 0x23, 0x55, 0x10, 0xc2, 0x53, 0x01, 0x52, 0x61, 0x0f, 0x35, 0x6f,
	0xcd, 0xff, 0x4c, 0x26, 0xa3, 0x81, 0x63, 0x79, 0x96, 0xdf, 0x08, 0xd7, 0x5b, 0xb8, 0x87, 0x1a,
	0xc3, 0x8c, 0x19, 0xcb, 0xa9, 0x79, 0x96, 0xdf, 0xec, 0xb6, 0x88, 0x1e, 0x44, 0xcc, 0x24, 0x32,
	0x36, 0x33, 0xc2, 0x2f, 0x0e, 0xf7, 0xd1, 0xbe, 0xa9, 0xa2, 0x64, 0x96, 0x51, 0x55, 0x08, 0x70,
	0xfe, 0x69, 0xf5, 0xb0, 0xaa, 0x7e, 0x7e, 0x0e, 0xbf, 0xf3, 0xf8, 0x02, 0xa1, 0x61, 0xc6, 0x06,
	0x54, 0xd1, 0x1b, 0x58, 0x3a, 0xff, 0x7f, 0x1a, 0xbc, 0x06, 0xe2, 0x73, 0xb4, 0x1d, 0x81, 0x94,
	0x09, 0xcf, 0x9c, 0x2d, 0xed, 0xb8, 0xa4, 0x92, 0xb0, 0xce, 0xaf, 0x24, 0xc2, 0x0f, 0x14, 0x9f,
	0x20, 0x7b, 0x24, 0xaf, 0x81, 0x2e, 0x54, 0x7c, 0x15, 0x03, 0x9b, 0x3b, 0x75, 0xcf, 0xf2, 0x77,
	0xc2, 0x6a, 0xb3, 0xfb, 0x66, 0xa1, 0xbd, 0x32, 0x9a, 0xc8, 0x2c, 0x0a, 0x3f, 0xa0, 0x66, 0xbf,
	0x50, 0x71, 0xd9, 0xc5, 0x6d, 0xb2, 0x69, 0x9d, 0x64, 0x85, 0x8c, 0x21, 0x9d, 0x82, 0x28, 0x73,
	0x77, 0xfd, 0xdf, 0x41, 0x99, 0xf3, 0x4c, 0x02, 0xbe, 0x47, 0x76, 0xa4, 0x04, 0xd0, 0xd4, 0x04,
	0x24, 0xf1, 0xf1, 0x66, 0xb5, 0xb2, 0x57, 0xf7, 0x2f, 0x90, 0x6f, 0x75, 0xac, 0xcb, 0xf6, 0xdd,
	0xe9, 0xda, 0x19, 0x69, 0xc9, 0x3c, 0xcf, 0x8c, 0x1a, 0x94, 0xea, 0xb4, 0xae, 0x4f, 0xa8, 0xf7,
	0x1e, 0x00, 0x00, 0xff, 0xff, 0x53, 0x2f, 0xce, 0x13, 0xc0, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PartnerServiceClient is the client API for PartnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PartnerServiceClient interface {
	AuthPartner(ctx context.Context, in *AuthMemberRequest, opts ...grpc.CallOption) (*AuthMemberResponse, error)
	StreamUpdates(ctx context.Context, opts ...grpc.CallOption) (PartnerService_StreamUpdatesClient, error)
}

type partnerServiceClient struct {
	cc *grpc.ClientConn
}

func NewPartnerServiceClient(cc *grpc.ClientConn) PartnerServiceClient {
	return &partnerServiceClient{cc}
}

func (c *partnerServiceClient) AuthPartner(ctx context.Context, in *AuthMemberRequest, opts ...grpc.CallOption) (*AuthMemberResponse, error) {
	out := new(AuthMemberResponse)
	err := c.cc.Invoke(ctx, "/taask.server.service.PartnerService/AuthPartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerServiceClient) StreamUpdates(ctx context.Context, opts ...grpc.CallOption) (PartnerService_StreamUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PartnerService_serviceDesc.Streams[0], "/taask.server.service.PartnerService/StreamUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &partnerServiceStreamUpdatesClient{stream}
	return x, nil
}

type PartnerService_StreamUpdatesClient interface {
	Send(*UpdateRequest) error
	Recv() (*UpdateRequest, error)
	grpc.ClientStream
}

type partnerServiceStreamUpdatesClient struct {
	grpc.ClientStream
}

func (x *partnerServiceStreamUpdatesClient) Send(m *UpdateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnerServiceStreamUpdatesClient) Recv() (*UpdateRequest, error) {
	m := new(UpdateRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PartnerServiceServer is the server API for PartnerService service.
type PartnerServiceServer interface {
	AuthPartner(context.Context, *AuthMemberRequest) (*AuthMemberResponse, error)
	StreamUpdates(PartnerService_StreamUpdatesServer) error
}

func RegisterPartnerServiceServer(s *grpc.Server, srv PartnerServiceServer) {
	s.RegisterService(&_PartnerService_serviceDesc, srv)
}

func _PartnerService_AuthPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerServiceServer).AuthPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taask.server.service.PartnerService/AuthPartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerServiceServer).AuthPartner(ctx, req.(*AuthMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerService_StreamUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnerServiceServer).StreamUpdates(&partnerServiceStreamUpdatesServer{stream})
}

type PartnerService_StreamUpdatesServer interface {
	Send(*UpdateRequest) error
	Recv() (*UpdateRequest, error)
	grpc.ServerStream
}

type partnerServiceStreamUpdatesServer struct {
	grpc.ServerStream
}

func (x *partnerServiceStreamUpdatesServer) Send(m *UpdateRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnerServiceStreamUpdatesServer) Recv() (*UpdateRequest, error) {
	m := new(UpdateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PartnerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "taask.server.service.PartnerService",
	HandlerType: (*PartnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthPartner",
			Handler:    _PartnerService_AuthPartner_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamUpdates",
			Handler:       _PartnerService_StreamUpdates_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "partner.proto",
}
